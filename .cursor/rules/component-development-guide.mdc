---
description: 
globs: 
alwaysApply: true
---
# Component Development Guide

## Overview
This project uses Astro components with TypeScript, following specific patterns for i18n integration, responsive design, and interactive functionality.

## Component Architecture

### Basic Astro Component Structure
```astro
---
// Frontmatter (Component Script)
import '../styles/global.css';
import { getTranslations } from '../i18n';

// Props interface (when needed)
interface Props {
  title: string;
  variant?: 'primary' | 'secondary';
}

// Component logic
const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);
const { title, variant = 'primary' } = Astro.props;
---

<!-- Component Template -->
<div class="component-class">
  <h1>{title}</h1>
  <p>{t.common.description}</p>
</div>

<script>
  // Client-side JavaScript (if needed)
</script>

<style>
  /* Component-specific styles (if needed) */
</style>
```

## Key Component Examples

### Navigation Component Pattern
Based on [Header.astro](mdc:src/components/Header.astro):

#### Features
- **Responsive navigation** with mobile hamburger menu
- **i18n integration** with localized paths
- **Interactive JavaScript** for menu toggling
- **Accessibility features** with ARIA attributes

#### Key Patterns
```astro
---
// Localized path generation
function getLocalizedPath(path: string): string {
  if (locale === 'es') {
    return path === '/' ? '/' : path;
  }
  return path === '/' ? `/${locale}/` : `/${locale}${path}`;
}

// Menu configuration with color coding
const menuItems = [
  {
    text: t.header.about,
    href: getLocalizedPath('/about'),
    afterColorClass: "lg:after:bg-purple-jm"
  },
  // ... more items
];
---
```

### Interactive Components

#### Client-side Script Pattern
```astro
<script>
  // DOM element selection
  const toggleButton = document.getElementById('navbar-toggle');
  const menu = document.getElementById('navbar-menu');
  
  // Function definitions
  function closeMenu() {
    // Implementation
  }
  
  function openMenu() {
    // Implementation
  }
  
  // Event listeners
  if (toggleButton && menu) {
    toggleButton.addEventListener('click', handleToggle);
  }
</script>
```

## Component Types & Patterns

### 1. Layout Components
- **Header.astro** - Navigation and branding
- **Footer.astro** - Site footer with links and info
- Used across multiple pages for consistent structure

### 2. Content Components
- **Banner.astro** - Hero sections with call-to-action
- **InfoSection.astro** - Information display sections
- **PurposeSection.astro** - Mission/purpose content

### 3. Interactive Components
- **Countdown.astro** - Event countdown timer
- **Contact.astro** - Contact forms and information
- **LanguageSwitcher.astro** - Language selection

### 4. Card Components
- **InfoCard.astro** - Individual information cards
- **InfoCards.astro** - Collection of info cards
- **ResourcesCards.astro** - Resource display cards

## Best Practices

### 1. Component Organization
```
src/components/
├── Header.astro           # Navigation
├── Footer.astro           # Site footer
├── Banner.astro           # Hero sections
├── InfoSection.astro      # Content sections
├── Countdown.astro        # Interactive components
└── ...
```

### 2. Styling Approach
- **Import global.css** in components that use custom theme variables
- **Use Tailwind classes** for styling with custom JamCam colors
- **Apply responsive design** with mobile-first approach
- **Maintain consistency** across components

### 3. i18n Integration
```astro
---
import { getTranslations } from '../i18n';

const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);

// Use getLocalizedPath for internal links
function getLocalizedPath(path: string): string {
  // Implementation
}
---

<a href={getLocalizedPath('/about')}>{t.navigation.about}</a>
```

### 4. TypeScript Usage
```astro
---
interface Props {
  title: string;
  description?: string;
  variant?: 'primary' | 'secondary';
  className?: string;
}

const { 
  title, 
  description, 
  variant = 'primary',
  className = ''
} = Astro.props;
---
```

### 5. Accessibility Guidelines
- Use semantic HTML elements (`<nav>`, `<header>`, `<main>`, etc.)
- Include ARIA attributes for interactive elements
- Provide proper focus management
- Ensure keyboard navigation support
- Use descriptive alt text for images

### 6. Performance Considerations
- **Lazy load images** when appropriate
- **Minimize JavaScript** - only include what's necessary
- **Use CSS for animations** when possible
- **Optimize font loading** with `font-display: swap`

## Component Communication

### Props Pattern
```astro
---
interface Props {
  items: Array<{
    title: string;
    href: string;
    color?: string;
  }>;
  variant?: 'horizontal' | 'vertical';
}

const { items, variant = 'horizontal' } = Astro.props;
---

{items.map(item => (
  <a href={item.href} class={`nav-link ${item.color || ''}`}>
    {item.title}
  </a>
))}
```

### Slot Pattern
```astro
---
// ParentComponent.astro
---
<div class="container">
  <slot name="header" />
  <main>
    <slot /> <!-- Default slot -->
  </main>
  <slot name="footer" />
</div>
```

## Testing & Debugging

### Development Tips
1. **Use browser dev tools** for responsive testing
2. **Check accessibility** with screen readers
3. **Validate HTML** structure and semantics
4. **Test JavaScript** functionality across browsers
5. **Verify i18n** behavior with different locales

### Common Issues
- **Mobile menu not working**: Check JavaScript event listeners
- **Styling not applied**: Ensure global.css is imported
- **Translation missing**: Verify key exists in all language files
- **Path not localized**: Use `getLocalizedPath()` function

