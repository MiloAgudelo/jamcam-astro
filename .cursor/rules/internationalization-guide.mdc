---
description: 
globs: 
alwaysApply: true
---
# Internationalization (i18n) Guide

## Overview
This project uses a custom i18n system supporting Spanish (default), English, Portuguese, and French. The routing configuration in [astro.config.mjs](mdc:astro.config.mjs) sets up language prefixes with Spanish as the default locale (no prefix).

## Configuration
```javascript
// From astro.config.mjs
i18n: {
  defaultLocale: 'es',
  locales: ['es', 'en', 'pt', 'fr'],
  routing: {
    prefixDefaultLocale: false
  }
}
```

## Translation System

### Core Files
- [src/i18n/index.ts](mdc:src/i18n/index.ts) - Main translation utilities
- [src/i18n/es.ts](mdc:src/i18n/es.ts) - Spanish translations (default)
- [src/i18n/en.ts](mdc:src/i18n/en.ts) - English translations
- [src/i18n/pt.ts](mdc:src/i18n/pt.ts) - Portuguese translations
- [src/i18n/fr.ts](mdc:src/i18n/fr.ts) - French translations

### Usage Pattern in Components

```astro
---
import { getTranslations } from '../i18n';

const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);

function getLocalizedPath(path: string): string {
  if (locale === 'es') {
    return path === '/' ? '/' : path;
  }
  return path === '/' ? `/${locale}/` : `/${locale}${path}`;
}
---

<h1>{t.header.title}</h1>
<a href={getLocalizedPath('/about')}>{t.header.about}</a>
```

## URL Structure
- **Spanish (default)**: `/`, `/about`, `/program` (no prefix)
- **English**: `/en/`, `/en/about`, `/en/program`
- **Portuguese**: `/pt/`, `/pt/about`, `/pt/program`
- **French**: `/fr/`, `/fr/about`, `/fr/program`

## Page Structure
- Root pages in `src/pages/` are for Spanish content
- Localized pages go in `src/pages/[locale]/` directories
- Example: `src/pages/en/about.astro` for English about page

## Best Practices

1. **Always use `getTranslations(locale)`** to access translations
2. **Use `getLocalizedPath()`** for internal navigation links
3. **Keep translation keys consistent** across all language files
4. **Use TypeScript types** from the base Spanish translation file
5. **Test with `Astro.currentLocale`** to handle locale detection

## Common Translation Structure
```typescript
// Example from translation files
export default {
  header: {
    about: "Acerca de",
    participate: "Participa",
    program: "Programa",
    blog: "Blog",
    resources: "Recursos",
    contacts: "Contactos"
  },
  // ... more sections
}
```

## Adding New Languages
1. Create new translation file in `src/i18n/[locale].ts`
2. Export translations object with same structure as `es.ts`
3. Add locale to `astro.config.mjs` locales array
4. Import and add to `languages` object in `src/i18n/index.ts`
5. Create corresponding page directories in `src/pages/[locale]/`

