---
import '../styles/global.css';
import { getTranslations } from '../i18n';

interface Props {
  initialYear?: number;
  initialMonth?: number;
}

const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);

const currentDate = new Date();
const { initialYear = currentDate.getFullYear(), initialMonth = currentDate.getMonth() } = Astro.props;

// Calendar constants
const today = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());

// Helper function to format date keys
function formatDateKey(year: number, month: number, day: number): string {
  return `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
}

// Helper function to get CSS classes for calendar days
function getDayClasses(dayData: any): string {
  const base = "calendar-day relative flex items-center justify-center text-sm font-medium h-10 w-full lg:h-11 lg:max-w-14 lg:mx-auto rounded-md transition-all duration-150 ease-linear";
  
  if (!dayData.isCurrentMonth) {
    return `${base} bg-green-jm/30 text-gray-400 pointer-events-none`;
  }
  if (dayData.hasEvents) {
    return `${base} bg-purple-jm text-white hover:bg-purple-jm/90 cursor-pointer focus-visible:outline-2 focus-visible:outline-purple-jm focus-visible:outline-offset-2`;
  }
  return `${base} bg-purple-jm/50 text-purple-jm hover:bg-purple-jm/70 hover:text-white cursor-pointer focus-visible:outline-2 focus-visible:outline-purple-jm focus-visible:outline-offset-2`;
}

// Helper function to get calendar data for a month
function getCalendarData(year: number, month: number) {
  const firstDay = new Date(year, month, 1);
  const startDate = new Date(firstDay);
  
  // Adjust for week start (Sunday = 0)
  const dayOfWeek = firstDay.getDay();
  startDate.setDate(startDate.getDate() - dayOfWeek);
  
  // Always generate exactly 42 days (6 weeks × 7 days)
  const calendarDays = [];
  const current = new Date(startDate);
  
  for (let i = 0; i < 42; i++) {
    const isCurrentMonth = current.getMonth() === month;
    const isToday = current.getTime() === today.getTime();
    const dateKey = formatDateKey(current.getFullYear(), current.getMonth(), current.getDate());
    const eventsForDay = t.calendar.events[dateKey];
    const hasEvents = eventsForDay && eventsForDay.length > 0;
    
    calendarDays.push({
      date: new Date(current),
      day: current.getDate(),
      isCurrentMonth,
      isToday,
      hasEvents,
      dateKey
    });
    
    current.setDate(current.getDate() + 1);
  }
  
  return calendarDays;
}

const calendarData = getCalendarData(initialYear, initialMonth);
const monthName = t.calendar.months[initialMonth];

// Format selected date display
function formatSelectedDate(day: number, month: number, year: number): string {
  return t.calendar.selectedDateFormat
    .replace('{day}', day.toString())
    .replace('{month}', t.calendar.months[month])
    .replace('{year}', year.toString());
}

// Prepare minimal translations for client-side script
const clientTranslations = {
  months: t.calendar.months,
  noEventsMessage: t.calendar.noEventsMessage,
  events: t.calendar.events
};
---

<div class="calendar-wrapper mx-4 md:mx-8 lg:mx-auto lg:max-w-4xl xl:max-w-5xl py-4 md:py-8 lg:py-12">
  <div class="calendar-container bg-white rounded-lg shadow-lg overflow-hidden max-w-full mx-auto">
    <!-- Two-column layout: Calendar (left) and Events (right) -->
    <div class="grid grid-cols-1 lg:grid-cols-2 min-h-[500px] max-lg:grid-rows-[auto_1fr]">
      
      <!-- Left Column: Calendar -->
      <div class="calendar-section p-4 lg:p-6 border-b lg:border-b-0 lg:border-r border-gray-200">
        <!-- Calendar Header with Navigation -->
        <div class="calendar-header text-center mb-6">
          <div class="flex items-center justify-between mb-2">
            <button 
              id="prev-month" 
              class="nav-button flex items-center justify-center w-8 h-8 rounded-full bg-purple-jm text-white hover:bg-purple-jm/90 transition-all duration-150 ease-linear cursor-pointer"
              aria-label="Mes anterior"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
            
            <h2 id="month-year-display" class="text-xl lg:text-2xl font-bold text-purple-jm">
              {monthName} {initialYear}
            </h2>
            
            <button 
              id="next-month" 
              class="nav-button flex items-center justify-center w-8 h-8 rounded-full bg-purple-jm text-white hover:bg-purple-jm/90 transition-all duration-150 ease-linear cursor-pointer"
              aria-label="Mes siguiente"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Days of Week Header -->
        <div class="days-header grid grid-cols-7 gap-1 mb-2">
          {t.calendar.daysShort.map((day) => (
            <div class="day-header text-center text-sm font-semibold text-gray-600 py-2">
              {day}
            </div>
          ))}
        </div>
        
        <!-- Calendar Grid -->
        <div id="calendar-grid" class="calendar-grid grid grid-cols-7 gap-1 lg:gap-1.5">
          {calendarData.map((dayData) => (
            dayData.isCurrentMonth ? (
              <button 
                class={getDayClasses(dayData)}
                data-date={dayData.dateKey}
                data-events={dayData.hasEvents ? 'true' : 'false'}
                aria-label={`${dayData.day} ${monthName} ${initialYear}${dayData.hasEvents ? ' - Con eventos' : ''}`}
              >
                {dayData.day}
              </button>
            ) : (
              <div class={getDayClasses(dayData)}>
                {dayData.day}
              </div>
            )
          ))}
        </div>
      </div>
      
      <!-- Right Column: Day Information -->
      <div class="events-section p-4 lg:p-6 bg-gradient-to-br from-gray-50 to-white">
        <!-- Selected Day Header -->
        <div class="selected-day-header mb-8">
          <div id="selected-date-display" class="bg-gradient-to-r from-purple-jm to-purple-jm/90 text-white rounded-xl px-6 py-4 text-center shadow-sm">
            <div class="text-sm font-medium opacity-90 mb-1">Fecha seleccionada</div>
            <div class="text-lg font-bold">
              {formatSelectedDate(today.getDate(), today.getMonth(), today.getFullYear())}
            </div>
          </div>
        </div>
        
        <!-- Events List -->
        <div class="events-list">
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2 text-purple-jm" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              {t.calendar.eventsTitle || 'Eventos del día'}
            </h3>
          </div>
          
          <div id="events-container" class="min-h-[200px]">
            <!-- Default content (today's events or no events message) -->
            {(() => {
              const todayKey = formatDateKey(today.getFullYear(), today.getMonth(), today.getDate());
              const todayEvents = t.calendar.events[todayKey];
              
              if (todayEvents && todayEvents.length > 0) {
                return (
                  <div class="space-y-4">
                    {todayEvents.map((event: string, index: number) => (
                      <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200">
                        <div class="flex items-start space-x-3">
                          <div class="flex-shrink-0">
                            <div class="w-3 h-3 bg-purple-jm rounded-full mt-1.5 shadow-sm"></div>
                          </div>
                          <div class="flex-1">
                            <p class="text-gray-800 font-medium leading-relaxed">{event}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                );
              } else {
                return (
                  <div class="text-center py-12">
                    <div class="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                      <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                    </div>
                    <p class="text-gray-500 text-lg font-medium">{t.calendar.noEventsMessage}</p>
                    <p class="text-gray-400 text-sm mt-2">Selecciona otro día para ver más eventos</p>
                  </div>
                );
              }
            })()}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ calendarData, clientTranslations, initialYear, initialMonth }}>
  let currentYear = initialYear;
  let currentMonth = initialMonth;
  let selectedDateKey = null; // Track selected day across month navigation
  
  function formatDateKey(date) {
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  }
  
  function formatSelectedDate(day, month, year) {
    return `${day} ${clientTranslations.months[month]} ${year}`;
  }
  
  function updateSelectedDay(dateKey) {
    // Parse date from dateKey
    const [year, month, day] = dateKey.split('-').map(num => parseInt(num));
    
    // Update selected date tracking
    selectedDateKey = dateKey;
    
    // Update visual selection
    document.querySelectorAll('.calendar-day').forEach(el => {
      el.classList.remove('ring-2', 'ring-salmon-jm', 'ring-inset');
    });
    
    const selectedElement = document.querySelector(`[data-date="${dateKey}"]`);
    if (selectedElement) {
      selectedElement.classList.add('ring-2', 'ring-salmon-jm', 'ring-inset');
      // Remove focus to prevent double outline
      selectedElement.blur();
    }
    
    // Update date display
    const dateDisplay = document.getElementById('selected-date-display');
    if (dateDisplay) {
      dateDisplay.textContent = formatSelectedDate(day, month - 1, year);
    }
    
    // Update events
    updateEventsDisplay(dateKey);
  }
  
  function updateEventsDisplay(dateKey) {
    const eventsContainer = document.getElementById('events-container');
    if (!eventsContainer) return;
    
    const events = clientTranslations.events[dateKey];
    
    if (events && events.length > 0) {
      eventsContainer.innerHTML = `
        <div class="space-y-4">
          ${events.map((event) => `
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200">
              <div class="flex items-start space-x-3">
                <div class="flex-shrink-0">
                  <div class="w-3 h-3 bg-purple-jm rounded-full mt-1.5 shadow-sm"></div>
                </div>
                <div class="flex-1">
                  <p class="text-gray-800 font-medium leading-relaxed">${event}</p>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    } else {
      eventsContainer.innerHTML = `
        <div class="text-center py-12">
          <div class="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <p class="text-gray-500 text-lg font-medium">${clientTranslations.noEventsMessage}</p>
          <p class="text-gray-400 text-sm mt-2">Selecciona otro día para ver más eventos</p>
        </div>
      `;
    }
  }
  
  function getDayClasses(dayData) {
    const base = "calendar-day relative flex items-center justify-center text-sm font-medium h-10 w-full lg:h-11 lg:max-w-14 lg:mx-auto rounded-md transition-all duration-150 ease-linear";
    
    if (!dayData.isCurrentMonth) {
      return `${base} bg-green-jm/30 text-gray-400 pointer-events-none`;
    }
    if (dayData.hasEvents) {
      return `${base} bg-purple-jm text-white hover:bg-purple-jm/90 cursor-pointer focus-visible:outline-2 focus-visible:outline-purple-jm focus-visible:outline-offset-2`;
    }
    return `${base} bg-purple-jm/50 text-purple-jm hover:bg-purple-jm/70 hover:text-white cursor-pointer focus-visible:outline-2 focus-visible:outline-purple-jm focus-visible:outline-offset-2`;
  }
  
  function renderCalendar(year, month) {
    const calendarGrid = document.getElementById('calendar-grid');
    const monthYearDisplay = document.getElementById('month-year-display');
    
    if (!calendarGrid || !monthYearDisplay) return;
    
    // Update month/year display
    monthYearDisplay.textContent = `${clientTranslations.months[month]} ${year}`;
    
    // Generate new calendar data for the month
    const firstDay = new Date(year, month, 1);
    const startDate = new Date(firstDay);
    const dayOfWeek = firstDay.getDay();
    startDate.setDate(startDate.getDate() - dayOfWeek);
    
    const newCalendarDays = [];
    const current = new Date(startDate);
    
    for (let i = 0; i < 42; i++) {
      const isCurrentMonth = current.getMonth() === month;
      const dateKey = formatDateKey(current);
      const eventsForDay = clientTranslations.events[dateKey];
      const hasEvents = eventsForDay && eventsForDay.length > 0;
      
      newCalendarDays.push({
        day: current.getDate(),
        isCurrentMonth,
        hasEvents,
        dateKey
      });
      
      current.setDate(current.getDate() + 1);
    }
    
    // Clear and rebuild calendar grid
    calendarGrid.innerHTML = '';
    
    newCalendarDays.forEach((dayData) => {
      if (dayData.isCurrentMonth) {
        const button = document.createElement('button');
        button.className = getDayClasses(dayData);
        button.setAttribute('data-date', dayData.dateKey);
        button.setAttribute('data-events', dayData.hasEvents ? 'true' : 'false');
        button.setAttribute('aria-label', `${dayData.day} ${clientTranslations.months[month]} ${year}${dayData.hasEvents ? ' - Con eventos' : ''}`);
        button.textContent = dayData.day.toString();
        
        // If this day is the currently selected one, mark it as selected
        if (dayData.dateKey === selectedDateKey) {
          button.classList.add('ring-2', 'ring-salmon-jm', 'ring-inset');
        }
        
        button.onclick = () => updateSelectedDay(dayData.dateKey);
        button.onkeydown = (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            updateSelectedDay(dayData.dateKey);
          }
        };
        
        calendarGrid.appendChild(button);
      } else {
        const div = document.createElement('div');
        div.className = getDayClasses(dayData);
        div.textContent = dayData.day.toString();
        calendarGrid.appendChild(div);
      }
    });
  }
  
  function navigateMonth(direction) {
    if (direction === -1) {
      currentMonth--;
      if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
      }
    } else if (direction === 1) {
      currentMonth++;
      if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
      }
    }
    
    renderCalendar(currentYear, currentMonth);
  }
  
  function initializeCalendar() {
    // Add navigation button listeners
    document.getElementById('prev-month').onclick = () => navigateMonth(-1);
    document.getElementById('next-month').onclick = () => navigateMonth(1);
    
    // Add click listeners to existing calendar days
    document.querySelectorAll('button.calendar-day').forEach(button => {
      button.onclick = () => updateSelectedDay(button.dataset.date);
      button.onkeydown = (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          updateSelectedDay(button.dataset.date);
        }
      };
    });
    
    // Set today as initially selected if it's in the current month view
    const today = new Date();
    if (today.getFullYear() === currentYear && today.getMonth() === currentMonth) {
      const todayKey = formatDateKey(today);
      updateSelectedDay(todayKey);
    }
  }
  
  initializeCalendar();
</script>

<style>
  @media (max-width: 1023px) {
    .calendar-container .grid {
      grid-template-rows: auto 1fr;
    }
  }
</style> 