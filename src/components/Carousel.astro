---
interface Props {
  images: Array<{
    src: string;
    alt: string;
  }>;
  carouselId: string;
  width?: string;
  height?: string;
  autoRotateInterval?: number;
  className?: string;
}

const { 
  images, 
  carouselId, 
  width = "w-80 h-80 md:w-96 md:h-96 lg:w-[450px] lg:h-[450px]",
  height = "",
  autoRotateInterval = 4000,
  className = ""
} = Astro.props;

const uniqueClass = `carousel-${carouselId}`;
---

<div class={`${className} ${width.includes('w-full') ? 'w-full h-full' : 'flex justify-center'}`}>
  <!-- Main Carousel Container -->
  <div 
    id={carouselId}
    class={`relative ${width} ${height} rounded-lg overflow-hidden`}
  >
      <!-- Image Slides -->
      {images.map((image, index) => (
        <div 
          class={`${uniqueClass}-slide absolute inset-0 transition-opacity duration-500 ease-in-out ${
            index === 0 ? 'opacity-100' : 'opacity-0'
          }`}
          data-slide-index={index}
        >
          <img 
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </div>
      ))}
  </div>
</div>

<script define:vars={{ carouselId, uniqueClass, autoRotateInterval }}>
  class CarouselManager {
    constructor(carouselId, uniqueClass, autoRotateInterval) {
      this.carouselId = carouselId;
      this.uniqueClass = uniqueClass;
      this.autoRotateInterval = autoRotateInterval;
      this.carousel = null;
      this.slides = null;
      this.currentSlide = 0;
      this.totalSlides = 0;
      this.intervalId = null;
      
      this.init();
    }

    init() {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup());
      } else {
        this.setup();
      }
    }

    setup() {
      this.carousel = document.getElementById(this.carouselId);
      this.slides = document.querySelectorAll(`.${this.uniqueClass}-slide`);
      this.totalSlides = this.slides.length;
      
      if (this.carousel && this.slides.length > 0) {
        this.startAutoRotation();
      }
    }

    showSlide(index) {
      this.slides.forEach((slide, i) => {
        if (i === index) {
          slide.classList.remove('opacity-0');
          slide.classList.add('opacity-100');
        } else {
          slide.classList.remove('opacity-100');
          slide.classList.add('opacity-0');
        }
      });
    }

    nextSlide() {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
      this.showSlide(this.currentSlide);
    }

    startAutoRotation() {
      this.pauseAutoRotation();
      this.intervalId = setInterval(() => {
        this.nextSlide();
      }, this.autoRotateInterval);
    }

    pauseAutoRotation() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }
  }

  // Initialize carousel
  new CarouselManager(carouselId, uniqueClass, autoRotateInterval);
</script>

<style>
  .carousel-slide {
    transition: opacity 500ms ease-in-out;
  }
</style> 