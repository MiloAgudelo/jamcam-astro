---
import '../styles/global.css';
import { getTranslations } from '../i18n';

const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);

function getLocalizedPath(path: string): string {
  if (locale === 'es') {
    return path === '/' ? '/' : path;
  }
  return path === '/' ? `/${locale}/` : `/${locale}${path}`;
}

const menuItems = [
  {
    text: t.header.about,
    href: getLocalizedPath('/about'),
    afterColorClass: "lg:after:bg-purple-jm"
  },
  {
    text: t.header.participate,
    href: getLocalizedPath('/participate'),
    afterColorClass: "lg:after:bg-salmon-jm"
  },
  {
    text: t.header.program,
    href: getLocalizedPath('/program'),
    afterColorClass: "lg:after:bg-green-jm"
  },
  {
    text: t.header.blog,
    href: getLocalizedPath('/blog'),
    afterColorClass: "lg:after:bg-orange-jm"
  },
  {
    text: t.header.resources,
    href: getLocalizedPath('/resources'),
    afterColorClass: "lg:after:bg-pink-jm"
  },
  {
    text: t.header.contacts,
    href: getLocalizedPath('/contacts'),
    isButton: true
  }
];
---

<header>
  <nav class="relative w-full h-[98px] lg:h-[125px] bg-background-color shadow-nav-shadow z-[1000]">
    <div class="w-full h-full px-4 mx-auto md:px-5 lg:px-[100px] flex items-center justify-between relative">
      <a href={getLocalizedPath('/')} class="flex-shrink-0 h-auto lg:h-[130px] w-auto">
        <img src="/src/assets/logo-jamcam-color.svg" alt="Logo JamCam 2025" class="h-[80px] lg:h-[130px] w-auto object-contain" />
      </a>

      <button id="navbar-toggle" class="lg:hidden p-2.5 text-salmon-jm order-1 absolute right-4 md:right-5 top-1/2 -translate-y-1/2 z-[1001] cursor-pointer" aria-expanded="false" aria-controls="navbar-menu" type="button">
        <div class="relative w-8 h-8">
          <!-- Hamburger Icon -->
          <svg 
            id="hamburger-icon"
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 448 512" 
            class="w-8 h-8 fill-current absolute inset-0 transition-all duration-300 ease-in-out opacity-100 rotate-0"
          >
            <path d="M0 96C0 78.3 14.3 64 32 64l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 288c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32L32 448c-17.7 0-32-14.3-32-32s14.3-32 32-32l384 0c17.7 0 32 14.3 32 32z"/>
          </svg>
          
          <!-- Close (X) Icon -->
          <svg 
            id="close-icon"
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 384 512" 
            class="w-8 h-8 fill-current absolute inset-0 transition-all duration-300 ease-in-out opacity-0 rotate-90"
          >
            <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
          </svg>
        </div>
      </button>

      <ul id="navbar-menu" class="
        absolute lg:static 
        top-full lg:top-auto left-0 lg:right-0 
        w-full lg:w-auto
        bg-[#faf9f6] lg:bg-transparent
        flex-col lg:flex-row items-stretch lg:items-center lg:justify-end
        py-4 lg:py-0 gap-0 lg:gap-5
        opacity-0 lg:opacity-100 invisible lg:visible 
        transition-opacity duration-200 ease-in-out lg:transition-none
        pointer-events-none lg:pointer-events-auto
        flex list-none m-0 p-0 z-[1000]
      ">
        {menuItems.map((item, index) => (
          <li class="w-full lg:w-auto">
            {item.isButton ? (
              <a
                href={item.href}
                class="
                  block text-center
                  py-3 px-6 lg:py-3 lg:px-6
                  mx-4 lg:mx-0 my-2 lg:my-0
                  text-[1rem] lg:text-[1.1rem]
                  font-medium lg:font-bold
                  text-white lg:text-white
                  bg-salmon-jm lg:bg-salmon-jm
                  border-salmon-jm lg:border-[2px] lg:border-salmon-jm
                  rounded-none
                  transition-all duration-150 ease-linear
                  hover:bg-salmon-jm/90 lg:hover:scale-105 
                  lg:shadow-button-shadow lg:hover:shadow-button-hover-shadow
                  leading-normal lg:leading-[1.3em]
                  active:scale-95 lg:active:scale-100
                "
              >
                {item.text}
              </a>
            ) : (
              <a
                href={item.href}
                class={`
                  block text-center lg:text-left relative
                  py-4 px-6 lg:py-2 lg:px-2
                  text-[1rem] lg:text-[1.1rem]
                  font-medium lg:font-semibold
                  text-text-color
                  transition-all duration-150 ease-linear
                  hover:bg-gray-50 lg:hover:bg-transparent lg:hover:-translate-y-0.5
                  active:bg-gray-100 lg:active:bg-transparent
                  lg:after:content-[''] lg:after:absolute lg:after:h-[2px] lg:after:bottom-0 lg:after:left-1/2 lg:after:-translate-x-1/2 lg:after:w-0 lg:after:transition-all lg:after:duration-150 lg:after:ease-linear
                  ${item.afterColorClass || ''}
                  lg:hover:after:w-[calc(100%-24px)]
                `}
              >
                {item.text}
              </a>
            )}
          </li>
        ))}
      </ul>
    </div>
  </nav>
</header>

<script>
  const toggleButton = document.getElementById('navbar-toggle');
  const menu = document.getElementById('navbar-menu');
  const hamburgerIcon = document.getElementById('hamburger-icon');
  const closeIcon = document.getElementById('close-icon');

  function closeMenu() {
    if (!menu || !toggleButton) return;
    
    menu.classList.add('opacity-0', 'invisible', 'pointer-events-none');
    menu.classList.remove('opacity-100', 'visible', 'pointer-events-auto');
    toggleButton.setAttribute('aria-expanded', 'false');
    
    // Animate back to hamburger icon
    if (hamburgerIcon && closeIcon) {
      hamburgerIcon.classList.remove('opacity-0', 'rotate-90');
      hamburgerIcon.classList.add('opacity-100', 'rotate-0');
      closeIcon.classList.remove('opacity-100', 'rotate-0');
      closeIcon.classList.add('opacity-0', 'rotate-90');
    }
  }

  function openMenu() {
    if (!menu || !toggleButton) return;
    
    menu.classList.remove('opacity-0', 'invisible', 'pointer-events-none');
    menu.classList.add('opacity-100', 'visible', 'pointer-events-auto');
    toggleButton.setAttribute('aria-expanded', 'true');
    
    // Animate to close icon
    if (hamburgerIcon && closeIcon) {
      hamburgerIcon.classList.remove('opacity-100', 'rotate-0');
      hamburgerIcon.classList.add('opacity-0', 'rotate-90');
      closeIcon.classList.remove('opacity-0', 'rotate-90');
      closeIcon.classList.add('opacity-100', 'rotate-0');
    }
  }

  if (toggleButton && menu) {
    toggleButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const isMenuVisible = menu.classList.contains('opacity-100');

      if (isMenuVisible) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    // Cerrar el menú cuando se hace click en un enlace
    const menuLinks = menu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        setTimeout(closeMenu, 100);
      });
    });

    // Cerrar menú con tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && menu.classList.contains('opacity-100')) {
        closeMenu();
      }
    });

    // Cerrar menú al hacer click fuera
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!menu.contains(target) && !toggleButton.contains(target)) {
        closeMenu();
      }
    });
  }
</script>
