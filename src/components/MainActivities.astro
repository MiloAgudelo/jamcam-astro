---
import { getTranslations } from '../i18n';

const locale = Astro.currentLocale || 'es';
const t = getTranslations(locale);

// Group activities into two sets for mobile sliders
const firstSliderActivities = [
  { icon: "/src/assets/activity-icon-1.svg", alt: "Cultural Activities", text: t.program.activities.cultural },
  { icon: "/src/assets/activity-icon-2.svg", alt: "Adventure Circuits", text: t.program.activities.adventure },
  { icon: "/src/assets/activity-icon-3.svg", alt: "Inclusion Dynamics", text: t.program.activities.inclusion },
  { icon: "/src/assets/activity-icon-4.svg", alt: "City Exploration", text: t.program.activities.exploration },
];

const secondSliderActivities = [
  { icon: "/src/assets/activity-icon-5.svg", alt: "Development Village", text: t.program.activities.village },
  { icon: "/src/assets/activity-icon-6.svg", alt: "Ceremonies", text: t.program.activities.ceremonies },
  { icon: "/src/assets/activity-icon-7.svg", alt: "New Year Celebration", text: t.program.activities.newYear },
  { icon: "/src/assets/activity-icon-8.svg", alt: "Service Activities", text: t.program.activities.service },
];
---

<section class="w-full py-16 lg:py-24">
  <div class="container mx-auto px-4 lg:px-8">
    <!-- Centered paragraph -->
    <div class="max-w-4xl mx-auto text-center mb-16">
      <p class="text-lg lg:text-xl text-gray-700 leading-relaxed">
        {t.program.description}
      </p>
    </div>

    <!-- Main Activities Title -->
    <div class="text-center mb-12">
      <h2 class="text-3xl lg:text-4xl font-bold text-purple-jm mb-4">
        {t.program.mainActivitiesTitle}
      </h2>
    </div>

    <!-- Mobile Scrollable Sliders (visible only on mobile) -->
    <div class="md:hidden space-y-8">
      <!-- First Slider -->
      <div class="relative">
        <div class="scroll-container overflow-x-auto scrollbar-hide">
          <div class="flex gap-4 pb-4 px-1 infinite-scroll">
            {[...firstSliderActivities, ...firstSliderActivities].map((activity, index) => (
              <div class="flex-none w-[280px]" data-index={index}>
                <div class="flex flex-col items-center text-center p-6 bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-md border border-gray-100 h-full">
                  <div class="w-24 h-24 mb-4 flex items-center justify-center">
                    <img src={activity.icon} alt={activity.alt} class="w-full h-full object-contain" />
                  </div>
                  <p class="text-sm text-gray-700 font-semibold leading-relaxed">
                    {activity.text}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Second Slider -->
      <div class="relative">
        <div class="scroll-container overflow-x-auto scrollbar-hide">
          <div class="flex gap-4 pb-4 px-1 infinite-scroll">
            {[...secondSliderActivities, ...secondSliderActivities].map((activity, index) => (
              <div class="flex-none w-[280px]" data-index={index}>
                <div class="flex flex-col items-center text-center p-6 bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-md border border-gray-100 h-full">
                  <div class="w-24 h-24 mb-4 flex items-center justify-center">
                    <img src={activity.icon} alt={activity.alt} class="w-full h-full object-contain" />
                  </div>
                  <p class="text-sm text-gray-700 font-semibold leading-relaxed">
                    {activity.text}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>

    <!-- Desktop Grid (hidden on mobile) -->
    <div class="hidden md:grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
      {[...firstSliderActivities, ...secondSliderActivities].map((activity) => (
        <div class="flex flex-col items-center text-center p-8 bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-md hover:shadow-xl hover:scale-105 transition-all duration-300 border border-gray-100">
          <div class="w-32 h-32 mb-6 flex items-center justify-center">
            <img src={activity.icon} alt={activity.alt} class="w-full h-full object-contain" />
          </div>
          <p class="text-sm lg:text-base text-gray-700 font-semibold leading-relaxed">
            {activity.text}
          </p>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }

  .scroll-container {
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    position: relative;
  }

  .scroll-container > div > div {
    scroll-snap-align: start;
  }

  .infinite-scroll {
    width: max-content;
  }

  /* Add JavaScript to handle infinite scroll */
  .scroll-container {
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
  }
</style>

<script>
  // Function to handle infinite scroll
  function setupInfiniteScroll() {
    const containers = document.querySelectorAll('.scroll-container');
    
    containers.forEach(container => {
      const scrollContent = container.querySelector('.infinite-scroll');
      if (!scrollContent) return;

      const items = scrollContent.querySelectorAll('[data-index]');
      const firstItem = items[0] as HTMLElement;
      const itemWidth = firstItem?.offsetWidth || 0;
      const gap = 16; // 4 * 4px (gap-4)
      const totalWidth = (itemWidth + gap) * items.length / 2;

      container.addEventListener('scroll', () => {
        const scrollLeft = (container as HTMLElement).scrollLeft;
        const containerWidth = (container as HTMLElement).offsetWidth;
        
        // If we're near the end, jump back to the start
        if (scrollLeft >= totalWidth - containerWidth) {
          (container as HTMLElement).scrollLeft = 0;
        }
        // If we're near the start and scrolling backwards, jump to the end
        else if (scrollLeft <= 0) {
          (container as HTMLElement).scrollLeft = totalWidth - containerWidth;
        }
      });
    });
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', setupInfiniteScroll);
</script> 